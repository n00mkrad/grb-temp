name: Build

on:
  push:
    paths-ignore:
      - 'docs/**'
      - '**.md'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**.md'
    branches-ignore:
      - crowdin

env:
  QT_VERSION: 6.6.3
  QT_MODULES: qtmultimedia qtimageformats qtnetworkauth qtshadertools
  IS_RELEASE: ${{ startsWith(github.ref, 'refs/tags/v') }}
  IS_NIGHTLY: ${{ !startsWith(github.ref, 'refs/tags/v') }}
  CMAKE_BUILD_PARALLEL_LEVEL: 2
  QSCINTILLA_VERSION: 2.14.1
  QSCINTILLA_DIR: QScintilla_src-2.14.1
  ANDROID_NDK_VERSION: 25.1.8937393

jobs:
  # Gatekeeper job to skip build for Crowdin PRs
  gatekeeper:
    name: Gatekeeper
    if: startsWith(github.head_ref, 'crowdin') == false
    runs-on: ubuntu-latest
    steps:
      - run: echo "OK"

  uncrustify:
    name: Uncrustify
    runs-on: ubuntu-latest
    needs: gatekeeper

    env:
      UNCRUSTIFY_COMMIT: 8edb7262e855c4271e9e5fc26af93861103e14fa

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Uncrustify cache
        uses: actions/cache@v4
        id: bin-cache
        with:
          path: bin
          key: ${{ runner.os }}-uncrustify-${{ env.UNCRUSTIFY_COMMIT }}

      - name: Build uncrustify
        if: steps.bin-cache.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/uncrustify/uncrustify.git uncrustify_git
          cd uncrustify_git
          git checkout $UNCRUSTIFY_COMMIT
          cd ..
          mkdir uncrustify_build
          cd uncrustify_build
          cmake ../uncrustify_git
          cmake --build .
          mkdir $GITHUB_WORKSPACE/bin
          cp uncrustify $GITHUB_WORKSPACE/bin
          cd ..

      - name: Add bin to path
        run: echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH

      - name: Print uncrustify version
        run: uncrustify -v

      - name: Run uncrustify
        run: ./scripts/uncrustify.sh

      - name: Check diff
        run: git diff --exit-code

  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    needs: gatekeeper

    env:
      COVERAGE: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install packages
        run: |
          sudo apt update
          sudo apt install libpulse-dev lcov libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libxkbcommon-x11-0

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          cache: true
          version: ${{ env.QT_VERSION }}
          modules: ${{ env.QT_MODULES }}

      - name: Build
        run: |
          mkdir build
          cd build
          cmake ../src -DCMAKE_BUILD_TYPE=Debug -DNIGHTLY=0 -DCOMMIT="$GITHUB_SHA" -DVERSION="9.9.9"
          cmake --build . --config Debug --target sites
          cmake --build . --config Debug

      - name: Test
        working-directory: src/lib
        run: |
          QT_QPA_PLATFORM=offscreen ../../build/lib/tests/lib-tests
          QT_QPA_PLATFORM=offscreen ../../build/cli/tests/cli-tests

      - name: Test GUI
        working-directory: src/lib
        run: |
          QT_QPA_PLATFORM=offscreen ../../build/gui/tests/gui-tests
          QT_QPA_PLATFORM=offscreen ../../build/crash-reporter/tests/crash-reporter-tests

      - name: Test sites
        working-directory: src/sites
        run: |
          npm ci
          npm run test

      - name: Capture coverage info
        run: |
          lcov --directory . --capture --output-file coverage.info
          lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.info
          lcov --list coverage.info

      - name: Upload coverage results
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  version:
    name: Version
    runs-on: ubuntu-latest
    needs: gatekeeper

    outputs:
      version: ${{ steps.get-version.outputs.version }}
      release: ${{ steps.get-version.outputs.release }}
      nightly: ${{ steps.get-version.outputs.nightly }}

    steps:
      - name: Get version
        id: get-version
        run: |
          if [[ "$IS_RELEASE" == 'true' ]]; then echo "version=${GITHUB_REF##*/}" >> $GITHUB_OUTPUT ; fi
          if [[ "$IS_RELEASE" != 'true' ]]; then echo "version=nightly" >> $GITHUB_OUTPUT ; fi
          echo "release=$([ "$IS_RELEASE" = "true" ] && echo "1" || echo "0")" >> $GITHUB_OUTPUT
          echo "nightly=$([ "$IS_NIGHTLY" = "true" ] && echo "1" || echo "0")" >> $GITHUB_OUTPUT

  windows:
    name: Windows
    runs-on: windows-2022
    needs: version

    env:
      GRABBER_VERSION: ${{ needs.version.outputs.version }}
      GRABBER_IS_NIGHTLY: ${{ needs.version.outputs.nightly }}
      MYSQL_DRIVER_URL: https://github.com/thecodemonkey86/qt_mysql_driver/files/14757676/qsqlmysql.dll_Qt_SQL_driver_6.6.3_MSVC2019_64-bit.zip
      OPENSSL_ROOT_DIR: ${{ github.workspace }}\vendor\OpenSSL
      MYSQL_DRIVER_DIR: ${{ github.workspace }}\vendor\MySQL_driver

    steps:
      - name: Set environment
        shell: bash
        run: echo "BUILD_TYPE=$([ "$GRABBER_IS_NIGHTLY" = "1" ] && echo "Release" || echo "RelWithDebInfo")" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          cache: true
          version: ${{ env.QT_VERSION }}
          modules: ${{ env.QT_MODULES }}

      - name: Vendor cache
        uses: actions/cache@v4
        id: vendor-cache
        with:
          path: vendor
          key: ${{ runner.os }}-vendor-${{ hashFiles('.github/workflows/build.yml') }}

      - name: Create vendor dirs
        if: steps.vendor-cache.outputs.cache-hit != 'true'
        shell: cmd
        run: mkdir vendor

      - name: Set up MSVC (VS 2022, x64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Build QScintilla
        if: steps.vendor-cache.outputs.cache-hit != 'true'
        working-directory: vendor
        shell: cmd
        run: |
          curl -Lo "QScintilla.zip" "https://www.riverbankcomputing.com/static/Downloads/QScintilla/%QSCINTILLA_VERSION%/QScintilla_src-%QSCINTILLA_VERSION%.zip"
          7z x "QScintilla.zip" -y
          rm "QScintilla.zip"
          cd "%QSCINTILLA_DIR%\src"
          qmake qscintilla.pro
          nmake

      - name: Install QScintilla
        working-directory: vendor
        shell: cmd
        run: |
          cd "%QSCINTILLA_DIR%\src"
          nmake install

      - name: Install OpenSSL
        if: steps.vendor-cache.outputs.cache-hit != 'true'
        working-directory: vendor
        shell: cmd
        run: |
          curl -Lo OpenSSL.exe "https://github.com/Bionus/imgbrd-grabber/releases/download/sources-master/Win64OpenSSL-3_1_4.exe" --fail
          OpenSSL.exe /VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP- /DIR="%OPENSSL_ROOT_DIR%"
          rm OpenSSL.exe

      - name: Download MySQL driver
        if: steps.vendor-cache.outputs.cache-hit != 'true'
        working-directory: vendor
        shell: cmd
        run: |
          curl -Lo "mysql_driver.zip" "%MYSQL_DRIVER_URL%"
          7z x "mysql_driver.zip" -y -o"%MYSQL_DRIVER_DIR%"
          rm "mysql_driver.zip"

      - name: Build
        shell: cmd
        run: |
          mkdir build
          cd build
          cmake ..\src -G "Visual Studio 17 2022" -A "x64" ^
            -DCMAKE_BUILD_TYPE=%BUILD_TYPE% ^
            -DCMAKE_SYSTEM_VERSION=10.0.18362.0 ^
            -DNIGHTLY=%GRABBER_IS_NIGHTLY% ^
            -DCOMMIT="%GITHUB_SHA%" ^
            -DVERSION="%GRABBER_VERSION%" ^
            -DVERSION_PLATFORM="x64"
          cmake --build . --config %BUILD_TYPE% --target sites
          cmake --build . --config %BUILD_TYPE%

      - name: Test
        shell: cmd
        working-directory: src/lib
        run: |
          ..\..\build\lib\tests\%BUILD_TYPE%\lib-tests.exe
          ..\..\build\cli\tests\%BUILD_TYPE%\cli-tests.exe
        env:
          QTDIR: ${{ env.Qt6_Dir }}
          QT_PLUGIN_PATH: ${{ env.Qt6_Dir }}\plugins

      - name: Generate installer
        shell: cmd
        run: |
          copy /Y "%MYSQL_DRIVER_DIR%\sqldrivers\*.dll" "%Qt6_Dir%\plugins\sqldrivers"
          iscc /Q ^
            /DMyAppVersion="%GRABBER_VERSION%" ^
            /DPlatformName="x64" ^
            /DQtDir="%Qt6_Dir%\bin" ^
            /DOpenSSLDir="%OPENSSL_ROOT_DIR%" ^
            /DMySQLDir="%MYSQL_DRIVER_DIR%" ^
            scripts\windows-setup\setup.iss
          mv scripts/windows-setup/Grabber_*.exe "Grabber_x64.exe"

      - name: Upload installer
        uses: actions/upload-artifact@v4
        with:
          name: Grabber_x64.exe
          path: Grabber_x64.exe
          if-no-files-found: error

      - name: Generate package
        shell: cmd
        run: scripts\package-windows.bat && mv Grabber.zip Grabber_x64.zip

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: Grabber_x64.zip
          path: Grabber_x64.zip
          if-no-files-found: error

      - name: Generate symbols ZIP
        if: ${{ github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/v') }}
        shell: cmd
        run: 7z a "Grabber_x64_symbols.zip" ".\build\gui\Grabber.pdb" ".\build\cli\Grabber-cli.pdb"

      - name: Upload symbols
        uses: actions/upload-artifact@v4
        if: ${{ github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/v') }}
        with:
          name: Grabber_x64_symbols.zip
          path: Grabber_x64_symbols.zip
          if-no-files-found: error

  github:
    name: Upload to GitHub releases
    runs-on: ubuntu-latest
    needs: [version, windows]

    if: github.repository == 'Bionus/imgbrd-grabber' && github.event_name == 'push' && (needs.version.outputs.release == '1' || github.ref == 'refs/heads/develop')

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      VERSION: ${{ needs.version.outputs.version }}

    steps:
      - name: Download artifact (Windows 64-bit installer)
        uses: actions/download-artifact@v4
        with:
          name: Grabber_x64.exe

      - name: Download artifact (Windows 64-bit archive)
        uses: actions/download-artifact@v4
        with:
          name: Grabber_x64.zip

      - name: Download artifact (Windows 64-bit symbols)
        uses: actions/download-artifact@v4
        if: needs.version.outputs.release == '1'
        with:
          name: Grabber_x64_symbols.zip

      - name: Rename artifacts
        run: |
          mv Grabber_x64.exe Grabber_${VERSION}_x64.exe
          mv Grabber_x64.zip Grabber_${VERSION}_x64.zip

      - name: Rename symbols artifacts
        if: needs.version.outputs.release == '1'
        run: |
          mv Grabber_x64_symbols.zip Grabber_${VERSION}_x64_symbols.zip

      - name: Get date for Nightly body
        id: date
        if: needs.version.outputs.nightly == '1'
        run: echo "date=$(date +'%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_OUTPUT

      - name: Nightly
        uses: ncipollo/release-action@v1
        if: needs.version.outputs.nightly == '1'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: nightly
          name: Nightly
          allowUpdates: true
          draft: false
          prerelease: true
          artifacts: Grabber_*
          body: |
            Nightly automated builds from the develop branch.
            Automatically uploaded by GitHub actions, **use at your own risk**!

            **Head:** ${{ github.sha }}
            **Date:** ${{ steps.date.outputs.date }}

      - name: Release
        uses: ncipollo/release-action@v1
        if: needs.version.outputs.release == '1'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          draft: true
          artifacts: Grabber_*
